{"version":3,"file":"vendors-node_modules_theia_filesystem_lib_common_remote-file-system-provider_js.js","mappings":"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","sources":["webpack:///../node_modules/@theia/filesystem/src/common/remote-file-system-provider.ts?"],"sourcesContent":["// *****************************************************************************\n// Copyright (C) 2020 TypeFox and others.\n//\n// This program and the accompanying materials are made available under the\n// terms of the Eclipse Public License v. 2.0 which is available at\n// http://www.eclipse.org/legal/epl-2.0.\n//\n// This Source Code may also be made available under the following Secondary\n// Licenses when the conditions for such availability set forth in the Eclipse\n// Public License v. 2.0 are satisfied: GNU General Public License, version 2\n// with the GNU Classpath Exception which is available at\n// https://www.gnu.org/software/classpath/license.html.\n//\n// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0\n// *****************************************************************************\n\nimport { injectable, inject, postConstruct } from '@theia/core/shared/inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { Emitter } from '@theia/core/lib/common/event';\nimport { Disposable, DisposableCollection } from '@theia/core/lib/common/disposable';\nimport { BinaryBuffer } from '@theia/core/lib/common/buffer';\nimport {\n    FileWriteOptions, FileOpenOptions, FileChangeType,\n    FileSystemProviderCapabilities, FileChange, Stat, FileOverwriteOptions, WatchOptions, FileType, FileSystemProvider, FileDeleteOptions,\n    hasOpenReadWriteCloseCapability, hasFileFolderCopyCapability, hasReadWriteCapability, hasAccessCapability,\n    FileSystemProviderError, FileSystemProviderErrorCode, FileUpdateOptions, hasUpdateCapability, FileUpdateResult, FileReadStreamOptions, hasFileReadStreamCapability,\n    ReadOnlyMessageFileSystemProvider\n} from './files';\nimport { RpcServer, RpcProxy, RpcProxyFactory } from '@theia/core/lib/common/messaging/proxy-factory';\nimport { ApplicationError } from '@theia/core/lib/common/application-error';\nimport { Deferred } from '@theia/core/lib/common/promise-util';\nimport type { TextDocumentContentChangeEvent } from '@theia/core/shared/vscode-languageserver-protocol';\nimport { newWriteableStream, ReadableStreamEvents } from '@theia/core/lib/common/stream';\nimport { CancellationToken, cancelled } from '@theia/core/lib/common/cancellation';\nimport { MarkdownString } from '@theia/core/lib/common/markdown-rendering';\n\nexport const remoteFileSystemPath = '/services/remote-filesystem';\n\nexport const RemoteFileSystemServer = Symbol('RemoteFileSystemServer');\nexport interface RemoteFileSystemServer extends RpcServer<RemoteFileSystemClient> {\n    getCapabilities(): Promise<FileSystemProviderCapabilities>\n    stat(resource: string): Promise<Stat>;\n    getReadOnlyMessage(): Promise<MarkdownString | undefined>;\n    access(resource: string, mode?: number): Promise<void>;\n    fsPath(resource: string): Promise<string>;\n    open(resource: string, opts: FileOpenOptions): Promise<number>;\n    close(fd: number): Promise<void>;\n    read(fd: number, pos: number, length: number): Promise<{ bytes: Uint8Array; bytesRead: number; }>;\n    readFileStream(resource: string, opts: FileReadStreamOptions, token: CancellationToken): Promise<number>;\n    readFile(resource: string): Promise<Uint8Array>;\n    write(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;\n    writeFile(resource: string, content: Uint8Array, opts: FileWriteOptions): Promise<void>;\n    delete(resource: string, opts: FileDeleteOptions): Promise<void>;\n    mkdir(resource: string): Promise<void>;\n    readdir(resource: string): Promise<[string, FileType][]>;\n    rename(source: string, target: string, opts: FileOverwriteOptions): Promise<void>;\n    copy(source: string, target: string, opts: FileOverwriteOptions): Promise<void>;\n    watch(watcher: number, resource: string, opts: WatchOptions): Promise<void>;\n    unwatch(watcher: number): Promise<void>;\n    updateFile(resource: string, changes: TextDocumentContentChangeEvent[], opts: FileUpdateOptions): Promise<FileUpdateResult>;\n}\n\nexport interface RemoteFileChange {\n    readonly type: FileChangeType;\n    readonly resource: string;\n}\n\nexport interface RemoteFileStreamError extends Error {\n    code?: FileSystemProviderErrorCode\n}\n\nexport interface RemoteFileSystemClient {\n    notifyDidChangeFile(event: { changes: RemoteFileChange[] }): void;\n    notifyFileWatchError(): void;\n    notifyDidChangeCapabilities(capabilities: FileSystemProviderCapabilities): void;\n    notifyDidChangeReadOnlyMessage(readOnlyMessage: MarkdownString | undefined): void;\n    onFileStreamData(handle: number, data: Uint8Array): void;\n    onFileStreamEnd(handle: number, error: RemoteFileStreamError | undefined): void;\n}\n\nexport const RemoteFileSystemProviderError = ApplicationError.declare(-33005,\n    (message: string, data: { code: FileSystemProviderErrorCode, name: string }, stack: string) =>\n        ({ message, data, stack })\n);\n\nexport class RemoteFileSystemProxyFactory<T extends object> extends RpcProxyFactory<T> {\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected override serializeError(e: any): any {\n        if (e instanceof FileSystemProviderError) {\n            const { code, name } = e;\n            return super.serializeError(RemoteFileSystemProviderError(e.message, { code, name }, e.stack));\n        }\n        return super.serializeError(e);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    protected override deserializeError(capturedError: Error, e: any): any {\n        const error = super.deserializeError(capturedError, e);\n        if (RemoteFileSystemProviderError.is(error)) {\n            const fileOperationError = new FileSystemProviderError(error.message, error.data.code);\n            fileOperationError.name = error.data.name;\n            fileOperationError.stack = error.stack;\n            return fileOperationError;\n        }\n        return e;\n    }\n}\n\n/**\n * Frontend component.\n *\n * Wraps the remote filesystem provider living on the backend.\n */\n@injectable()\nexport class RemoteFileSystemProvider implements Required<FileSystemProvider>, Disposable, ReadOnlyMessageFileSystemProvider {\n\n    private readonly onDidChangeFileEmitter = new Emitter<readonly FileChange[]>();\n    readonly onDidChangeFile = this.onDidChangeFileEmitter.event;\n\n    private readonly onFileWatchErrorEmitter = new Emitter<void>();\n    readonly onFileWatchError = this.onFileWatchErrorEmitter.event;\n\n    private readonly onDidChangeCapabilitiesEmitter = new Emitter<void>();\n    readonly onDidChangeCapabilities = this.onDidChangeCapabilitiesEmitter.event;\n\n    private readonly onDidChangeReadOnlyMessageEmitter = new Emitter<MarkdownString | undefined>();\n    readonly onDidChangeReadOnlyMessage = this.onDidChangeReadOnlyMessageEmitter.event;\n\n    private readonly onFileStreamDataEmitter = new Emitter<[number, Uint8Array]>();\n    private readonly onFileStreamData = this.onFileStreamDataEmitter.event;\n\n    private readonly onFileStreamEndEmitter = new Emitter<[number, Error | FileSystemProviderError | undefined]>();\n    private readonly onFileStreamEnd = this.onFileStreamEndEmitter.event;\n\n    protected readonly toDispose = new DisposableCollection(\n        this.onDidChangeFileEmitter,\n        this.onDidChangeCapabilitiesEmitter,\n        this.onDidChangeReadOnlyMessageEmitter,\n        this.onFileStreamDataEmitter,\n        this.onFileStreamEndEmitter\n    );\n\n    protected watcherSequence = 0;\n    /**\n     * We'll track the currently allocated watchers, in order to re-allocate them\n     * with the same options once we reconnect to the backend after a disconnection.\n     */\n    protected readonly watchOptions = new Map<number, {\n        uri: string;\n        options: WatchOptions\n    }>();\n\n    private _capabilities: FileSystemProviderCapabilities = FileSystemProviderCapabilities.None;\n    get capabilities(): FileSystemProviderCapabilities { return this._capabilities; }\n\n    private _readOnlyMessage: MarkdownString | undefined = undefined;\n    get readOnlyMessage(): MarkdownString | undefined {\n        return this._readOnlyMessage;\n    }\n\n    protected readonly readyDeferred = new Deferred<void>();\n    readonly ready = this.readyDeferred.promise;\n\n    /**\n     * Wrapped remote filesystem.\n     */\n    @inject(RemoteFileSystemServer)\n    protected readonly server: RpcProxy<RemoteFileSystemServer>;\n\n    @postConstruct()\n    protected init(): void {\n        this.server.getCapabilities().then(capabilities => {\n            this._capabilities = capabilities;\n            this.readyDeferred.resolve();\n        }, this.readyDeferred.reject);\n        this.server.getReadOnlyMessage().then(readOnlyMessage => {\n            this._readOnlyMessage = readOnlyMessage;\n        });\n        this.server.setClient({\n            notifyDidChangeFile: ({ changes }) => {\n                this.onDidChangeFileEmitter.fire(changes.map(event => ({ resource: new URI(event.resource), type: event.type })));\n            },\n            notifyFileWatchError: () => {\n                this.onFileWatchErrorEmitter.fire();\n            },\n            notifyDidChangeCapabilities: capabilities => this.setCapabilities(capabilities),\n            notifyDidChangeReadOnlyMessage: readOnlyMessage => this.setReadOnlyMessage(readOnlyMessage),\n            onFileStreamData: (handle, data) => this.onFileStreamDataEmitter.fire([handle, data]),\n            onFileStreamEnd: (handle, error) => this.onFileStreamEndEmitter.fire([handle, error])\n        });\n        const onInitialized = this.server.onDidOpenConnection(() => {\n            // skip reconnection on the first connection\n            onInitialized.dispose();\n            this.toDispose.push(this.server.onDidOpenConnection(() => this.reconnect()));\n        });\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    protected setCapabilities(capabilities: FileSystemProviderCapabilities): void {\n        this._capabilities = capabilities;\n        this.onDidChangeCapabilitiesEmitter.fire(undefined);\n    }\n\n    protected setReadOnlyMessage(readOnlyMessage: MarkdownString | undefined): void {\n        this._readOnlyMessage = readOnlyMessage;\n        this.onDidChangeReadOnlyMessageEmitter.fire(readOnlyMessage);\n    }\n\n    // --- forwarding calls\n\n    stat(resource: URI): Promise<Stat> {\n        return this.server.stat(resource.toString());\n    }\n\n    access(resource: URI, mode?: number): Promise<void> {\n        return this.server.access(resource.toString(), mode);\n    }\n\n    fsPath(resource: URI): Promise<string> {\n        return this.server.fsPath(resource.toString());\n    }\n\n    open(resource: URI, opts: FileOpenOptions): Promise<number> {\n        return this.server.open(resource.toString(), opts);\n    }\n\n    close(fd: number): Promise<void> {\n        return this.server.close(fd);\n    }\n\n    async read(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n        const { bytes, bytesRead } = await this.server.read(fd, pos, length);\n\n        // copy back the data that was written into the buffer on the remote\n        // side. we need to do this because buffers are not referenced by\n        // pointer, but only by value and as such cannot be directly written\n        // to from the other process.\n        data.set(bytes.slice(0, bytesRead), offset);\n\n        return bytesRead;\n    }\n\n    async readFile(resource: URI): Promise<Uint8Array> {\n        const bytes = await this.server.readFile(resource.toString());\n        return bytes;\n    }\n\n    readFileStream(resource: URI, opts: FileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array> {\n        const capturedError = new Error();\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        const stream = newWriteableStream<Uint8Array>(data => BinaryBuffer.concat(data.map(data => BinaryBuffer.wrap(data))).buffer);\n        this.server.readFileStream(resource.toString(), opts, token).then(streamHandle => {\n            if (token.isCancellationRequested) {\n                stream.end(cancelled());\n                return;\n            }\n            const toDispose = new DisposableCollection(\n                token.onCancellationRequested(() => stream.end(cancelled())),\n                this.onFileStreamData(([handle, data]) => {\n                    if (streamHandle === handle) {\n                        stream.write(data);\n                    }\n                }),\n                this.onFileStreamEnd(([handle, error]) => {\n                    if (streamHandle === handle) {\n                        if (error) {\n                            const code = ('code' in error && error.code) || FileSystemProviderErrorCode.Unknown;\n                            const fileOperationError = new FileSystemProviderError(error.message, code);\n                            fileOperationError.name = error.name;\n                            const capturedStack = capturedError.stack || '';\n                            fileOperationError.stack = `${capturedStack}\\nCaused by: ${error.stack}`;\n                            stream.end(fileOperationError);\n                        } else {\n                            stream.end();\n                        }\n                    }\n                })\n            );\n            stream.on('end', () => toDispose.dispose());\n        }, error => stream.end(error));\n        return stream;\n    }\n\n    write(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n        return this.server.write(fd, pos, data, offset, length);\n    }\n\n    writeFile(resource: URI, content: Uint8Array, opts: FileWriteOptions): Promise<void> {\n        return this.server.writeFile(resource.toString(), content, opts);\n    }\n\n    delete(resource: URI, opts: FileDeleteOptions): Promise<void> {\n        return this.server.delete(resource.toString(), opts);\n    }\n\n    mkdir(resource: URI): Promise<void> {\n        return this.server.mkdir(resource.toString());\n    }\n\n    readdir(resource: URI): Promise<[string, FileType][]> {\n        return this.server.readdir(resource.toString());\n    }\n\n    rename(resource: URI, target: URI, opts: FileOverwriteOptions): Promise<void> {\n        return this.server.rename(resource.toString(), target.toString(), opts);\n    }\n\n    copy(resource: URI, target: URI, opts: FileOverwriteOptions): Promise<void> {\n        return this.server.copy(resource.toString(), target.toString(), opts);\n    }\n\n    updateFile(resource: URI, changes: TextDocumentContentChangeEvent[], opts: FileUpdateOptions): Promise<FileUpdateResult> {\n        return this.server.updateFile(resource.toString(), changes, opts);\n    }\n\n    watch(resource: URI, options: WatchOptions): Disposable {\n        const watcherId = this.watcherSequence++;\n        const uri = resource.toString();\n        this.watchOptions.set(watcherId, { uri, options });\n        this.server.watch(watcherId, uri, options);\n        const toUnwatch = Disposable.create(() => {\n            this.watchOptions.delete(watcherId);\n            this.server.unwatch(watcherId);\n        });\n        this.toDispose.push(toUnwatch);\n        return toUnwatch;\n    }\n\n    /**\n     * When a frontend disconnects (e.g. bad connection) the backend resources will be cleared.\n     *\n     * This means that we need to re-allocate the watchers when a frontend reconnects.\n     */\n    protected reconnect(): void {\n        for (const [watcher, { uri, options }] of this.watchOptions.entries()) {\n            this.server.watch(watcher, uri, options);\n        }\n    }\n\n}\n\n/**\n * Backend component.\n *\n * JSON-RPC server exposing a wrapped file system provider remotely.\n */\n@injectable()\nexport class FileSystemProviderServer implements RemoteFileSystemServer {\n\n    private readonly BUFFER_SIZE = 64 * 1024;\n\n    /**\n     * Mapping of `watcherId` to a disposable watcher handle.\n     */\n    protected watchers = new Map<number, Disposable>();\n\n    protected readonly toDispose = new DisposableCollection();\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    protected client: RemoteFileSystemClient | undefined;\n    setClient(client: RemoteFileSystemClient | undefined): void {\n        this.client = client;\n    }\n\n    /**\n     * Wrapped file system provider.\n     */\n    @inject(FileSystemProvider)\n    protected readonly provider: FileSystemProvider & Partial<Disposable>;\n\n    @postConstruct()\n    protected init(): void {\n        if (this.provider.dispose) {\n            this.toDispose.push(Disposable.create(() => this.provider.dispose!()));\n        }\n        this.toDispose.push(this.provider.onDidChangeCapabilities(() => {\n            if (this.client) {\n                this.client.notifyDidChangeCapabilities(this.provider.capabilities);\n            }\n        }));\n        if (ReadOnlyMessageFileSystemProvider.is(this.provider)) {\n            const providerWithReadOnlyMessage: ReadOnlyMessageFileSystemProvider = this.provider;\n            this.toDispose.push(this.provider.onDidChangeReadOnlyMessage(() => {\n                if (this.client) {\n                    this.client.notifyDidChangeReadOnlyMessage(providerWithReadOnlyMessage.readOnlyMessage);\n                }\n            }));\n        }\n        this.toDispose.push(this.provider.onDidChangeFile(changes => {\n            if (this.client) {\n                this.client.notifyDidChangeFile({\n                    changes: changes.map(({ resource, type }) => ({ resource: resource.toString(), type }))\n                });\n            }\n        }));\n        this.toDispose.push(this.provider.onFileWatchError(() => {\n            if (this.client) {\n                this.client.notifyFileWatchError();\n            }\n        }));\n    }\n\n    async getCapabilities(): Promise<FileSystemProviderCapabilities> {\n        return this.provider.capabilities;\n    }\n\n    async getReadOnlyMessage(): Promise<MarkdownString | undefined> {\n        if (ReadOnlyMessageFileSystemProvider.is(this.provider)) {\n            return this.provider.readOnlyMessage;\n        } else {\n            return undefined;\n        }\n    }\n\n    stat(resource: string): Promise<Stat> {\n        return this.provider.stat(new URI(resource));\n    }\n\n    access(resource: string, mode?: number): Promise<void> {\n        if (hasAccessCapability(this.provider)) {\n            return this.provider.access(new URI(resource), mode);\n        }\n        throw new Error('not supported');\n    }\n\n    async fsPath(resource: string): Promise<string> {\n        if (hasAccessCapability(this.provider)) {\n            return this.provider.fsPath(new URI(resource));\n        }\n        throw new Error('not supported');\n    }\n\n    open(resource: string, opts: FileOpenOptions): Promise<number> {\n        if (hasOpenReadWriteCloseCapability(this.provider)) {\n            return this.provider.open(new URI(resource), opts);\n        }\n        throw new Error('not supported');\n    }\n\n    close(fd: number): Promise<void> {\n        if (hasOpenReadWriteCloseCapability(this.provider)) {\n            return this.provider.close(fd);\n        }\n        throw new Error('not supported');\n    }\n\n    async read(fd: number, pos: number, length: number): Promise<{ bytes: Uint8Array; bytesRead: number; }> {\n        if (hasOpenReadWriteCloseCapability(this.provider)) {\n            const buffer = BinaryBuffer.alloc(this.BUFFER_SIZE);\n            const bytes = buffer.buffer;\n            const bytesRead = await this.provider.read(fd, pos, bytes, 0, length);\n            return { bytes, bytesRead };\n        }\n        throw new Error('not supported');\n    }\n\n    write(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n        if (hasOpenReadWriteCloseCapability(this.provider)) {\n            return this.provider.write(fd, pos, data, offset, length);\n        }\n        throw new Error('not supported');\n    }\n\n    async readFile(resource: string): Promise<Uint8Array> {\n        if (hasReadWriteCapability(this.provider)) {\n            return this.provider.readFile(new URI(resource));\n        }\n        throw new Error('not supported');\n    }\n\n    writeFile(resource: string, content: Uint8Array, opts: FileWriteOptions): Promise<void> {\n        if (hasReadWriteCapability(this.provider)) {\n            return this.provider.writeFile(new URI(resource), content, opts);\n        }\n        throw new Error('not supported');\n    }\n\n    delete(resource: string, opts: FileDeleteOptions): Promise<void> {\n        return this.provider.delete(new URI(resource), opts);\n    }\n\n    mkdir(resource: string): Promise<void> {\n        return this.provider.mkdir(new URI(resource));\n    }\n\n    readdir(resource: string): Promise<[string, FileType][]> {\n        return this.provider.readdir(new URI(resource));\n    }\n\n    rename(source: string, target: string, opts: FileOverwriteOptions): Promise<void> {\n        return this.provider.rename(new URI(source), new URI(target), opts);\n    }\n\n    copy(source: string, target: string, opts: FileOverwriteOptions): Promise<void> {\n        if (hasFileFolderCopyCapability(this.provider)) {\n            return this.provider.copy(new URI(source), new URI(target), opts);\n        }\n        throw new Error('not supported');\n    }\n\n    updateFile(resource: string, changes: TextDocumentContentChangeEvent[], opts: FileUpdateOptions): Promise<FileUpdateResult> {\n        if (hasUpdateCapability(this.provider)) {\n            return this.provider.updateFile(new URI(resource), changes, opts);\n        }\n        throw new Error('not supported');\n    }\n\n    async watch(requestedWatcherId: number, resource: string, opts: WatchOptions): Promise<void> {\n        if (this.watchers.has(requestedWatcherId)) {\n            throw new Error('watcher id is already allocated!');\n        }\n        const watcher = this.provider.watch(new URI(resource), opts);\n        this.watchers.set(requestedWatcherId, watcher);\n        this.toDispose.push(Disposable.create(() => this.unwatch(requestedWatcherId)));\n    }\n\n    async unwatch(watcherId: number): Promise<void> {\n        const watcher = this.watchers.get(watcherId);\n        if (watcher) {\n            this.watchers.delete(watcherId);\n            watcher.dispose();\n        }\n    }\n\n    protected readFileStreamSeq = 0;\n\n    async readFileStream(resource: string, opts: FileReadStreamOptions, token: CancellationToken): Promise<number> {\n        if (hasFileReadStreamCapability(this.provider)) {\n            const handle = this.readFileStreamSeq++;\n            const stream = this.provider.readFileStream(new URI(resource), opts, token);\n            stream.on('data', data => this.client?.onFileStreamData(handle, data));\n            stream.on('error', error => {\n                const code = error instanceof FileSystemProviderError ? error.code : undefined;\n                const { name, message, stack } = error;\n                this.client?.onFileStreamEnd(handle, { code, name, message, stack });\n            });\n            stream.on('end', () => this.client?.onFileStreamEnd(handle, undefined));\n            return handle;\n        }\n        throw new Error('not supported');\n    }\n\n}\n"],"names":[],"sourceRoot":""}