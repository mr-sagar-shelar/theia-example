"use strict";
(self["webpackChunkbrowser_app"] = self["webpackChunkbrowser_app"] || []).push([["node_modules_theia_core_lib_browser-only_i18n_i18n-frontend-only-module_js"],{

/***/ "../node_modules/@theia/core/lib/browser-only/i18n/i18n-frontend-only-module.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/@theia/core/lib/browser-only/i18n/i18n-frontend-only-module.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// *****************************************************************************
// Copyright (C) 2023 EclipseSource and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! inversify */ "../node_modules/inversify/es/inversify.js");
const localization_1 = __webpack_require__(/*! ../../common/i18n/localization */ "../node_modules/@theia/core/lib/common/i18n/localization.js");
const language_quick_pick_service_1 = __webpack_require__(/*! ../../browser/i18n/language-quick-pick-service */ "../node_modules/@theia/core/lib/browser/i18n/language-quick-pick-service.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    const i18nMock = {
        getCurrentLanguage: async () => 'en',
        setCurrentLanguage: async (_languageId) => {
        },
        getAvailableLanguages: async () => [],
        loadLocalization: async (_languageId) => ({
            translations: {},
            languageId: 'en'
        })
    };
    bind(localization_1.AsyncLocalizationProvider).toConstantValue(i18nMock);
    bind(language_quick_pick_service_1.LanguageQuickPickService).toSelf().inSingletonScope();
});


/***/ })

}]);
//# sourceMappingURL=node_modules_theia_core_lib_browser-only_i18n_i18n-frontend-only-module_js.js.map